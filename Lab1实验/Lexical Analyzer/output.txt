<Keyword,import>
<ID,java>
<Delimiter,.>
<ID,io>
<Delimiter,.>
<ID,File>
<Delimiter,;>
<Keyword,import>
<ID,java>
<Delimiter,.>
<ID,util>
<Delimiter,.>
<ID,ArrayList>
<Delimiter,;>
<Keyword,import>
<ID,java>
<Delimiter,.>
<ID,util>
<Delimiter,.>
<ID,Arrays>
<Delimiter,;>
<Keyword,import>
<ID,java>
<Delimiter,.>
<ID,util>
<Delimiter,.>
<ID,List>
<Delimiter,;>
<Keyword,public>
<Keyword,class>
<ID,Tokenizer>
<Delimiter,{>
<Keyword,public>
<Keyword,static>
<Keyword,boolean>
<ID,validChar>
<Delimiter,(>
<Keyword,char>
<ID,c>
<Delimiter,)>
<Delimiter,{>
<Keyword,return>
<Delimiter,(>
<ID,c>
<Operator,==>
<Char,'_'>
<Operator,||>
<Delimiter,(>
<ID,c>
<Operator,>=>
<Char,'A'>
<Operator,&&>
<ID,c>
<Operator,<=>
<Char,'Z'>
<Delimiter,)>
<Operator,||>
<Delimiter,(>
<ID,c>
<Operator,>=>
<Char,'a'>
<Operator,&&>
<ID,c>
<Operator,<=>
<Char,'z'>
<Delimiter,)>
<Operator,||>
<Delimiter,(>
<ID,c>
<Operator,>=>
<Char,'0'>
<Operator,&&>
<ID,c>
<Operator,<=>
<Char,'9'>
<Delimiter,)>
<Delimiter,)>
<Delimiter,;>
<Delimiter,}>
<Keyword,public>
<Keyword,static>
<Keyword,void>
<ID,main>
<Delimiter,(>
<ID,String>
<Delimiter,[>
<Delimiter,]>
<ID,args>
<Delimiter,)>
<Delimiter,{>
<ID,String>
<Delimiter,[>
<Delimiter,]>
<ID,keywords>
<Operator,=>
<Delimiter,{>
<String,"public">
<Delimiter,,>
<String,"private">
<Delimiter,,>
<String,"protected">
<Delimiter,,>
<String,"package">
<Delimiter,,>
<String,"abstract">
<Delimiter,,>
<String,"new">
<Delimiter,,>
<String,"assert">
<Delimiter,,>
<String,"default">
<Delimiter,,>
<String,"synchronized">
<Delimiter,,>
<String,"volatile">
<Delimiter,,>
<String,"if">
<Delimiter,,>
<String,"else">
<Delimiter,,>
<String,"do">
<Delimiter,,>
<String,"while">
<Delimiter,,>
<String,"for">
<Delimiter,,>
<String,"break">
<Delimiter,,>
<String,"continue">
<Delimiter,,>
<String,"switch">
<Delimiter,,>
<String,"case">
<Delimiter,,>
<String,"import">
<Delimiter,,>
<String,"throws">
<Delimiter,,>
<String,"throw">
<Delimiter,,>
<String,"instanceof">
<Delimiter,,>
<String,"return">
<Delimiter,,>
<String,"transient">
<Delimiter,,>
<String,"try">
<Delimiter,,>
<String,"catch">
<Delimiter,,>
<String,"finally">
<Delimiter,,>
<String,"final">
<Delimiter,,>
<String,"void">
<Delimiter,,>
<String,"int">
<Delimiter,,>
<String,"short">
<Delimiter,,>
<String,"char">
<Delimiter,,>
<String,"long">
<Delimiter,,>
<String,"boolean">
<Delimiter,,>
<String,"double">
<Delimiter,,>
<String,"byte">
<Delimiter,,>
<String,"class">
<Delimiter,,>
<String,"enum">
<Delimiter,,>
<String,"super">
<Delimiter,,>
<String,"this">
<Delimiter,,>
<String,"implements">
<Delimiter,,>
<String,"extends">
<Delimiter,,>
<String,"interface">
<Delimiter,,>
<String,"static">
<Delimiter,,>
<String,"const">
<Delimiter,}>
<Delimiter,;>
<ID,List>
<Operator,<>
<ID,String>
<Operator,>>
<ID,keyword>
<Operator,=>
<ID,Arrays>
<Delimiter,.>
<ID,asList>
<Delimiter,(>
<ID,keywords>
<Delimiter,)>
<Delimiter,;>
<ID,String>
<Delimiter,[>
<Delimiter,]>
<ID,operators>
<Operator,=>
<Delimiter,{>
<String,"!">
<Delimiter,,>
<String,"+">
<Delimiter,,>
<String,"-">
<Delimiter,,>
<String,"*">
<Delimiter,,>
<String,"/">
<Delimiter,,>
<String,"%">
<Delimiter,,>
<String,"<<">
<Delimiter,,>
<String,">>">
<Delimiter,,>
<String,"<=">
<Delimiter,,>
<String,"<">
<Delimiter,,>
<String,">=">
<Delimiter,,>
<String,">">
<Delimiter,,>
<String,"==">
<Delimiter,,>
<String,"!=">
<Delimiter,,>
<String,"~">
<Delimiter,,>
<String,"^">
<Delimiter,,>
<String,"&">
<Delimiter,,>
<String,"|">
<Delimiter,,>
<String,"&&">
<Delimiter,,>
<String,"||">
<Delimiter,,>
<String,"=">
<Delimiter,,>
<String,"+=">
<Delimiter,,>
<String,"-=">
<Delimiter,,>
<String,"*=">
<Delimiter,,>
<String,"/=">
<Delimiter,}>
<Delimiter,;>
<ID,List>
<Operator,<>
<ID,String>
<Operator,>>
<ID,operator>
<Operator,=>
<ID,Arrays>
<Delimiter,.>
<ID,asList>
<Delimiter,(>
<ID,operators>
<Delimiter,)>
<Delimiter,;>
<ID,String>
<Delimiter,[>
<Delimiter,]>
<ID,delimiters>
<Operator,=>
<Delimiter,{>
<String,"(">
<Delimiter,,>
<String,")">
<Delimiter,,>
<String,"[">
<Delimiter,,>
<String,"]">
<Delimiter,,>
<String,"{">
<Delimiter,,>
<String,"}">
<Delimiter,,>
<String,";">
<Delimiter,,>
<String,",">
<Delimiter,,>
<String,".">
<Delimiter,,>
<String,"?">
<Delimiter,,>
<String,":">
<Delimiter,}>
<Delimiter,;>
<ID,List>
<Operator,<>
<ID,String>
<Operator,>>
<ID,delimiter>
<Operator,=>
<ID,Arrays>
<Delimiter,.>
<ID,asList>
<Delimiter,(>
<ID,delimiters>
<Delimiter,)>
<Delimiter,;>
<ID,List>
<Operator,<>
<ID,Character>
<Operator,>>
<ID,ws>
<Operator,=>
<Keyword,new>
<ID,ArrayList>
<Operator,<>
<Operator,>>
<Delimiter,(>
<Delimiter,)>
<Delimiter,;>
<ID,ws>
<Delimiter,.>
<ID,add>
<Delimiter,(>
<Char,' '>
<Delimiter,)>
<Delimiter,;>
<ID,ws>
<Delimiter,.>
<ID,add>
<Delimiter,(>
<Char,'\t'>
<Delimiter,)>
<Delimiter,;>
<ID,ws>
<Delimiter,.>
<ID,add>
<Delimiter,(>
<Char,'\n'>
<Delimiter,)>
<Delimiter,;>
<ID,File>
<ID,input>
<Operator,=>
<Keyword,new>
<ID,File>
<Delimiter,(>
<String,"input.txt">
<Delimiter,)>
<Delimiter,;>
<Keyword,if>
<Delimiter,(>
<Operator,!>
<ID,input>
<Delimiter,.>
<ID,exists>
<Delimiter,(>
<Delimiter,)>
<Delimiter,)>
<ID,FileHelper>
<Delimiter,.>
<ID,createFile>
<Delimiter,(>
<ID,input>
<Delimiter,)>
<Delimiter,;>
<ID,StringBuilder>
<ID,src>
<Operator,=>
<Keyword,new>
<ID,StringBuilder>
<Delimiter,(>
<ID,FileHelper>
<Delimiter,.>
<ID,readTxtFile>
<Delimiter,(>
<ID,input>
<Delimiter,)>
<Delimiter,)>
<Delimiter,;>
<ID,StringBuilder>
<ID,temp>
<Operator,=>
<Keyword,new>
<ID,StringBuilder>
<Delimiter,(>
<ID,src>
<Delimiter,.>
<ID,length>
<Delimiter,(>
<Delimiter,)>
<Delimiter,)>
<Delimiter,;>
<Keyword,int>
<ID,index>
<Operator,=>
<Number,0>
<Delimiter,;>
<Keyword,boolean>
<ID,literal>
<Operator,=>
<ID,false>
<Delimiter,;>
<Keyword,while>
<Delimiter,(>
<ID,index>
<Operator,<>
<ID,src>
<Delimiter,.>
<ID,length>
<Delimiter,(>
<Delimiter,)>
<Delimiter,)>
<Delimiter,{>
<Keyword,char>
<ID,c>
<Operator,=>
<ID,src>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<ID,index>
<Delimiter,)>
<Delimiter,;>
<Keyword,if>
<Delimiter,(>
<ID,c>
<Operator,==>
<Char,'"'>
<Delimiter,)>
<Delimiter,{>
<Keyword,if>
<Delimiter,(>
<ID,literal>
<Delimiter,)>
<ID,literal>
<Operator,=>
<ID,false>
<Delimiter,;>
<Keyword,else>
<ID,literal>
<Operator,=>
<ID,true>
<Delimiter,;>
<Delimiter,}>
<Keyword,if>
<Delimiter,(>
<Operator,!>
<ID,literal>
<Delimiter,)>
<Delimiter,{>
<Keyword,switch>
<Delimiter,(>
<ID,c>
<Delimiter,)>
<Delimiter,{>
<Keyword,case>
<Char,'/'>
<Delimiter,:>
<ID,index>
<Operator,+>
<Operator,+>
<Delimiter,;>
<ID,c>
<Operator,=>
<ID,src>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<ID,index>
<Delimiter,)>
<Delimiter,;>
<Keyword,if>
<Delimiter,(>
<ID,c>
<Operator,==>
<Char,'/'>
<Delimiter,)>
<Delimiter,{>
<Keyword,do>
<Delimiter,{>
<ID,index>
<Operator,+>
<Operator,+>
<Delimiter,;>
<ID,c>
<Operator,=>
<ID,src>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<ID,index>
<Delimiter,)>
<Delimiter,;>
<Delimiter,}>
<Keyword,while>
<Delimiter,(>
<ID,index>
<Operator,<>
<ID,src>
<Delimiter,.>
<ID,length>
<Delimiter,(>
<Delimiter,)>
<Operator,->
<Number,1>
<Operator,&&>
<ID,c>
<Operator,!=>
<Char,'\n'>
<Delimiter,)>
<Delimiter,;>
<Keyword,if>
<Delimiter,(>
<ID,c>
<Operator,==>
<Char,'\n'>
<Delimiter,)>
<Delimiter,{>
<ID,temp>
<Delimiter,.>
<ID,append>
<Delimiter,(>
<ID,c>
<Delimiter,)>
<Delimiter,;>
<ID,index>
<Operator,+>
<Operator,+>
<Delimiter,;>
<Delimiter,}>
<Keyword,else>
<Delimiter,{>
<ID,index>
<Operator,+>
<Operator,+>
<Delimiter,;>
<Delimiter,}>
<Delimiter,}>
<Keyword,else>
<Keyword,if>
<Delimiter,(>
<ID,c>
<Operator,==>
<Char,'*'>
<Delimiter,)>
<Delimiter,{>
<Keyword,do>
<Delimiter,{>
<ID,index>
<Operator,+>
<Operator,+>
<Delimiter,;>
<ID,c>
<Operator,=>
<ID,src>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<ID,index>
<Delimiter,)>
<Delimiter,;>
<Keyword,if>
<Delimiter,(>
<ID,c>
<Operator,==>
<Char,'\n'>
<Delimiter,)>
<Delimiter,{>
<ID,temp>
<Delimiter,.>
<ID,append>
<Delimiter,(>
<ID,c>
<Delimiter,)>
<Delimiter,;>
<ID,index>
<Operator,+>
<Operator,+>
<Delimiter,;>
<Delimiter,}>
<Keyword,else>
<Keyword,if>
<Delimiter,(>
<ID,c>
<Operator,==>
<Char,'*'>
<Delimiter,)>
<Delimiter,{>
<ID,index>
<Operator,+>
<Operator,+>
<Delimiter,;>
<ID,c>
<Operator,=>
<ID,src>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<ID,index>
<Delimiter,)>
<Delimiter,;>
<Keyword,if>
<Delimiter,(>
<ID,c>
<Operator,==>
<Char,'/'>
<Delimiter,)>
<Delimiter,{>
<ID,index>
<Operator,+>
<Operator,+>
<Delimiter,;>
<Keyword,break>
<Delimiter,;>
<Delimiter,}>
<Delimiter,}>
<Delimiter,}>
<Keyword,while>
<Delimiter,(>
<ID,index>
<Operator,<>
<ID,src>
<Delimiter,.>
<ID,length>
<Delimiter,(>
<Delimiter,)>
<Operator,->
<Number,1>
<Delimiter,)>
<Delimiter,;>
<Delimiter,}>
<Keyword,else>
<Delimiter,{>
<ID,temp>
<Delimiter,.>
<ID,append>
<Delimiter,(>
<Char,'/'>
<Delimiter,)>
<Delimiter,;>
<ID,temp>
<Delimiter,.>
<ID,append>
<Delimiter,(>
<ID,c>
<Delimiter,)>
<Delimiter,;>
<ID,index>
<Operator,+>
<Operator,+>
<Delimiter,;>
<Delimiter,}>
<Keyword,break>
<Delimiter,;>
<Keyword,default>
<Delimiter,:>
<ID,temp>
<Delimiter,.>
<ID,append>
<Delimiter,(>
<ID,c>
<Delimiter,)>
<Delimiter,;>
<ID,index>
<Operator,+>
<Operator,+>
<Delimiter,;>
<Keyword,break>
<Delimiter,;>
<Delimiter,}>
<Delimiter,}>
<Keyword,else>
<Delimiter,{>
<ID,temp>
<Delimiter,.>
<ID,append>
<Delimiter,(>
<ID,c>
<Delimiter,)>
<Delimiter,;>
<ID,index>
<Operator,+>
<Operator,+>
<Delimiter,;>
<Delimiter,}>
<Delimiter,}>
<ID,String>
<ID,tmp>
<Operator,=>
<ID,temp>
<Delimiter,.>
<ID,toString>
<Delimiter,(>
<Delimiter,)>
<Delimiter,;>
<ID,File>
<ID,check>
<Operator,=>
<Keyword,new>
<ID,File>
<Delimiter,(>
<String,"check.txt">
<Delimiter,)>
<Delimiter,;>
<Keyword,if>
<Delimiter,(>
<Operator,!>
<ID,check>
<Delimiter,.>
<ID,exists>
<Delimiter,(>
<Delimiter,)>
<Delimiter,)>
<ID,FileHelper>
<Delimiter,.>
<ID,createFile>
<Delimiter,(>
<ID,check>
<Delimiter,)>
<Delimiter,;>
<ID,FileHelper>
<Delimiter,.>
<ID,writeTxtFile>
<Delimiter,(>
<ID,tmp>
<Delimiter,,>
<ID,check>
<Delimiter,)>
<Delimiter,;>
<Keyword,int>
<ID,lexemeBeg>
<Operator,=>
<Number,0>
<Delimiter,;>
<Keyword,int>
<ID,forward>
<Operator,=>
<Number,1>
<Delimiter,;>
<ID,String>
<ID,value>
<Delimiter,;>
<ID,String>
<ID,token>
<Operator,=>
<String,"">
<Delimiter,;>
<Keyword,int>
<ID,lineCount>
<Operator,=>
<Number,1>
<Delimiter,;>
<ID,ArrayList>
<Operator,<>
<ID,String>
<Operator,>>
<ID,tokens>
<Operator,=>
<Keyword,new>
<ID,ArrayList>
<Operator,<>
<Operator,>>
<Delimiter,(>
<Delimiter,)>
<Delimiter,;>
<Keyword,while>
<Delimiter,(>
<ID,lexemeBeg>
<Operator,<>
<ID,tmp>
<Delimiter,.>
<ID,length>
<Delimiter,(>
<Delimiter,)>
<Delimiter,)>
<Delimiter,{>
<ID,value>
<Operator,=>
<ID,tmp>
<Delimiter,.>
<ID,substring>
<Delimiter,(>
<ID,lexemeBeg>
<Delimiter,,>
<ID,forward>
<Delimiter,)>
<Delimiter,;>
<Keyword,if>
<Delimiter,(>
<ID,delimiter>
<Delimiter,.>
<ID,contains>
<Delimiter,(>
<ID,value>
<Delimiter,)>
<Delimiter,)>
<Delimiter,{>
<ID,token>
<Operator,=>
<String,"<Delimiter,">
<Operator,+>
<ID,value>
<Operator,+>
<String,">">
<Delimiter,;>
<ID,tokens>
<Delimiter,.>
<ID,add>
<Delimiter,(>
<ID,token>
<Delimiter,)>
<Delimiter,;>
<ID,lexemeBeg>
<Operator,=>
<ID,forward>
<Delimiter,;>
<ID,forward>
<Operator,=>
<ID,lexemeBeg>
<Operator,+>
<Number,1>
<Delimiter,;>
<Delimiter,}>
<Keyword,else>
<Keyword,if>
<Delimiter,(>
<ID,operator>
<Delimiter,.>
<ID,contains>
<Delimiter,(>
<ID,value>
<Delimiter,)>
<Delimiter,)>
<Delimiter,{>
<Keyword,if>
<Delimiter,(>
<ID,forward>
<Operator,<>
<ID,tmp>
<Delimiter,.>
<ID,length>
<Delimiter,(>
<Delimiter,)>
<Delimiter,)>
<Delimiter,{>
<ID,String>
<ID,preCheck>
<Operator,=>
<ID,tmp>
<Delimiter,.>
<ID,substring>
<Delimiter,(>
<ID,lexemeBeg>
<Delimiter,,>
<ID,forward>
<Operator,+>
<Number,1>
<Delimiter,)>
<Delimiter,;>
<Keyword,if>
<Delimiter,(>
<ID,operator>
<Delimiter,.>
<ID,contains>
<Delimiter,(>
<ID,preCheck>
<Delimiter,)>
<Delimiter,)>
<Delimiter,{>
<ID,token>
<Operator,=>
<String,"<Operator,">
<Operator,+>
<ID,preCheck>
<Operator,+>
<String,">">
<Delimiter,;>
<ID,tokens>
<Delimiter,.>
<ID,add>
<Delimiter,(>
<ID,token>
<Delimiter,)>
<Delimiter,;>
<ID,lexemeBeg>
<Operator,=>
<ID,forward>
<Operator,+>
<Number,1>
<Delimiter,;>
<ID,forward>
<Operator,=>
<ID,lexemeBeg>
<Operator,+>
<Number,1>
<Delimiter,;>
<Delimiter,}>
<Keyword,else>
<Delimiter,{>
<ID,token>
<Operator,=>
<String,"<Operator,">
<Operator,+>
<ID,value>
<Operator,+>
<String,">">
<Delimiter,;>
<ID,tokens>
<Delimiter,.>
<ID,add>
<Delimiter,(>
<ID,token>
<Delimiter,)>
<Delimiter,;>
<ID,lexemeBeg>
<Operator,=>
<ID,forward>
<Delimiter,;>
<ID,forward>
<Operator,=>
<ID,lexemeBeg>
<Operator,+>
<Number,1>
<Delimiter,;>
<Delimiter,}>
<Delimiter,}>
<Keyword,else>
<Delimiter,{>
<ID,token>
<Operator,=>
<String,"<Operator,">
<Operator,+>
<ID,value>
<Operator,+>
<String,">">
<Delimiter,;>
<ID,tokens>
<Delimiter,.>
<ID,add>
<Delimiter,(>
<ID,token>
<Delimiter,)>
<Delimiter,;>
<ID,lexemeBeg>
<Operator,=>
<ID,forward>
<Delimiter,;>
<ID,forward>
<Operator,=>
<ID,lexemeBeg>
<Operator,+>
<Number,1>
<Delimiter,;>
<Delimiter,}>
<Delimiter,}>
<Keyword,else>
<Keyword,if>
<Delimiter,(>
<ID,value>
<Delimiter,.>
<ID,equals>
<Delimiter,(>
<String,"\'">
<Delimiter,)>
<Delimiter,)>
<Delimiter,{>
<Keyword,char>
<ID,end>
<Operator,=>
<Char,'\0'>
<Delimiter,;>
<Keyword,while>
<Delimiter,(>
<ID,end>
<Operator,!=>
<Char,'\''>
<Operator,&&>
<ID,forward>
<Operator,<>
<ID,tmp>
<Delimiter,.>
<ID,length>
<Delimiter,(>
<Delimiter,)>
<Delimiter,)>
<Delimiter,{>
<ID,end>
<Operator,=>
<ID,tmp>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<ID,forward>
<Delimiter,)>
<Delimiter,;>
<ID,forward>
<Operator,+>
<Operator,+>
<Delimiter,;>
<Delimiter,}>
<Keyword,if>
<Delimiter,(>
<ID,end>
<Operator,==>
<Char,'\''>
<Delimiter,)>
<Delimiter,{>
<ID,value>
<Operator,=>
<ID,tmp>
<Delimiter,.>
<ID,substring>
<Delimiter,(>
<ID,lexemeBeg>
<Delimiter,,>
<ID,forward>
<Delimiter,)>
<Delimiter,;>
<ID,token>
<Operator,=>
<String,"<Char,">
<Operator,+>
<ID,value>
<Operator,+>
<String,">">
<Delimiter,;>
<ID,tokens>
<Delimiter,.>
<ID,add>
<Delimiter,(>
<ID,token>
<Delimiter,)>
<Delimiter,;>
<ID,lexemeBeg>
<Operator,=>
<ID,forward>
<Delimiter,;>
<ID,forward>
<Operator,=>
<ID,lexemeBeg>
<Operator,+>
<Number,1>
<Delimiter,;>
<Delimiter,}>
<Keyword,else>
<Delimiter,{>
<ID,System>
<Delimiter,.>
<ID,out>
<Delimiter,.>
<ID,println>
<Delimiter,(>
<String,"Line ">
<Operator,+>
<ID,lineCount>
<Operator,+>
<String," @ Recognize Error:No Matched single quotes for Char To the end">
<Delimiter,)>
<Delimiter,;>
<Keyword,return>
<Delimiter,;>
<Delimiter,}>
<Delimiter,}>
<Keyword,else>
<Keyword,if>
<Delimiter,(>
<ID,value>
<Delimiter,.>
<ID,equals>
<Delimiter,(>
<String,"\"">
<Delimiter,)>
<Delimiter,)>
<Delimiter,{>
<Keyword,char>
<ID,end>
<Operator,=>
<Char,'\0'>
<Delimiter,;>
<Keyword,while>
<Delimiter,(>
<ID,end>
<Operator,!=>
<Char,'"'>
<Operator,&&>
<ID,forward>
<Operator,<>
<ID,tmp>
<Delimiter,.>
<ID,length>
<Delimiter,(>
<Delimiter,)>
<Delimiter,)>
<Delimiter,{>
<ID,end>
<Operator,=>
<ID,tmp>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<ID,forward>
<Delimiter,)>
<Delimiter,;>
<ID,forward>
<Operator,+>
<Operator,+>
<Delimiter,;>
<Delimiter,}>
<Keyword,if>
<Delimiter,(>
<ID,end>
<Operator,==>
<Char,'"'>
<Delimiter,)>
<Delimiter,{>
<ID,value>
<Operator,=>
<ID,tmp>
<Delimiter,.>
<ID,substring>
<Delimiter,(>
<ID,lexemeBeg>
<Delimiter,,>
<ID,forward>
<Delimiter,)>
<Delimiter,;>
<ID,token>
<Operator,=>
<String,"<String,">
<Operator,+>
<ID,value>
<Operator,+>
<String,">">
<Delimiter,;>
<ID,tokens>
<Delimiter,.>
<ID,add>
<Delimiter,(>
<ID,token>
<Delimiter,)>
<Delimiter,;>
<ID,lexemeBeg>
<Operator,=>
<ID,forward>
<Delimiter,;>
<ID,forward>
<Operator,=>
<ID,lexemeBeg>
<Operator,+>
<Number,1>
<Delimiter,;>
<Delimiter,}>
<Keyword,else>
<Delimiter,{>
<ID,System>
<Delimiter,.>
<ID,out>
<Delimiter,.>
<ID,println>
<Delimiter,(>
<String,"Line ">
<Operator,+>
<ID,lineCount>
<Operator,+>
<String," @ Recognize Error:No Matched double quotes for String To the end">
<Delimiter,)>
<Delimiter,;>
<Keyword,return>
<Delimiter,;>
<Delimiter,}>
<Delimiter,}>
<Keyword,else>
<Keyword,if>
<Delimiter,(>
<ID,ws>
<Delimiter,.>
<ID,contains>
<Delimiter,(>
<ID,value>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<Number,0>
<Delimiter,)>
<Delimiter,)>
<Delimiter,)>
<Delimiter,{>
<Keyword,if>
<Delimiter,(>
<ID,value>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<Number,0>
<Delimiter,)>
<Operator,==>
<Char,'\n'>
<Delimiter,)>
<ID,lineCount>
<Operator,+>
<Operator,+>
<Delimiter,;>
<ID,lexemeBeg>
<Operator,=>
<ID,forward>
<Delimiter,;>
<ID,forward>
<Operator,=>
<ID,lexemeBeg>
<Operator,+>
<Number,1>
<Delimiter,;>
<Delimiter,}>
<Keyword,else>
<Keyword,if>
<Delimiter,(>
<ID,value>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<Number,0>
<Delimiter,)>
<Operator,>=>
<Char,'0'>
<Operator,&&>
<ID,value>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<Number,0>
<Delimiter,)>
<Operator,<=>
<Char,'9'>
<Delimiter,)>
<Delimiter,{>
<Keyword,boolean>
<ID,dot>
<Operator,=>
<ID,false>
<Delimiter,;>
<Keyword,while>
<Delimiter,(>
<ID,forward>
<Operator,<>
<ID,tmp>
<Delimiter,.>
<ID,length>
<Delimiter,(>
<Delimiter,)>
<Operator,&&>
<Delimiter,(>
<Delimiter,(>
<ID,tmp>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<ID,forward>
<Delimiter,)>
<Operator,>=>
<Char,'0'>
<Operator,&&>
<ID,tmp>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<ID,forward>
<Delimiter,)>
<Operator,<=>
<Char,'9'>
<Delimiter,)>
<Operator,||>
<Delimiter,(>
<ID,tmp>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<ID,forward>
<Delimiter,)>
<Operator,==>
<Char,'.'>
<Operator,&&>
<Operator,!>
<ID,dot>
<Delimiter,)>
<Delimiter,)>
<Delimiter,)>
<Delimiter,{>
<Keyword,if>
<Delimiter,(>
<ID,tmp>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<ID,forward>
<Delimiter,)>
<Operator,==>
<Char,'.'>
<Delimiter,)>
<ID,dot>
<Operator,=>
<ID,true>
<Delimiter,;>
<ID,forward>
<Operator,+>
<Operator,+>
<Delimiter,;>
<Delimiter,}>
<ID,value>
<Operator,=>
<ID,tmp>
<Delimiter,.>
<ID,substring>
<Delimiter,(>
<ID,lexemeBeg>
<Delimiter,,>
<ID,forward>
<Delimiter,)>
<Delimiter,;>
<ID,token>
<Operator,=>
<String,"<Number,">
<Operator,+>
<ID,value>
<Operator,+>
<String,">">
<Delimiter,;>
<ID,tokens>
<Delimiter,.>
<ID,add>
<Delimiter,(>
<ID,token>
<Delimiter,)>
<Delimiter,;>
<ID,lexemeBeg>
<Operator,=>
<ID,forward>
<Delimiter,;>
<ID,forward>
<Operator,=>
<ID,lexemeBeg>
<Operator,+>
<Number,1>
<Delimiter,;>
<Delimiter,}>
<Keyword,else>
<Keyword,if>
<Delimiter,(>
<ID,value>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<Number,0>
<Delimiter,)>
<Operator,==>
<Char,'_'>
<Operator,||>
<Delimiter,(>
<ID,value>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<Number,0>
<Delimiter,)>
<Operator,>=>
<Char,'A'>
<Operator,&&>
<ID,value>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<Number,0>
<Delimiter,)>
<Operator,<=>
<Char,'Z'>
<Delimiter,)>
<Operator,||>
<Delimiter,(>
<ID,value>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<Number,0>
<Delimiter,)>
<Operator,>=>
<Char,'a'>
<Operator,&&>
<ID,value>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<Number,0>
<Delimiter,)>
<Operator,<=>
<Char,'z'>
<Delimiter,)>
<Delimiter,)>
<Delimiter,{>
<Keyword,while>
<Delimiter,(>
<ID,forward>
<Operator,<>
<ID,tmp>
<Delimiter,.>
<ID,length>
<Delimiter,(>
<Delimiter,)>
<Operator,&&>
<ID,Tokenizer>
<Delimiter,.>
<ID,validChar>
<Delimiter,(>
<ID,tmp>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<ID,forward>
<Delimiter,)>
<Delimiter,)>
<Delimiter,)>
<Delimiter,{>
<ID,forward>
<Operator,+>
<Operator,+>
<Delimiter,;>
<Delimiter,}>
<ID,value>
<Operator,=>
<ID,tmp>
<Delimiter,.>
<ID,substring>
<Delimiter,(>
<ID,lexemeBeg>
<Delimiter,,>
<ID,forward>
<Delimiter,)>
<Delimiter,;>
<Keyword,if>
<Delimiter,(>
<ID,keyword>
<Delimiter,.>
<ID,contains>
<Delimiter,(>
<ID,value>
<Delimiter,)>
<Delimiter,)>
<Delimiter,{>
<ID,token>
<Operator,=>
<String,"<Keyword,">
<Operator,+>
<ID,value>
<Operator,+>
<String,">">
<Delimiter,;>
<ID,tokens>
<Delimiter,.>
<ID,add>
<Delimiter,(>
<ID,token>
<Delimiter,)>
<Delimiter,;>
<ID,lexemeBeg>
<Operator,=>
<ID,forward>
<Delimiter,;>
<ID,forward>
<Operator,=>
<ID,lexemeBeg>
<Operator,+>
<Number,1>
<Delimiter,;>
<Delimiter,}>
<Keyword,else>
<Delimiter,{>
<ID,token>
<Operator,=>
<String,"<ID,">
<Operator,+>
<ID,value>
<Operator,+>
<String,">">
<Delimiter,;>
<ID,tokens>
<Delimiter,.>
<ID,add>
<Delimiter,(>
<ID,token>
<Delimiter,)>
<Delimiter,;>
<ID,lexemeBeg>
<Operator,=>
<ID,forward>
<Delimiter,;>
<ID,forward>
<Operator,=>
<ID,lexemeBeg>
<Operator,+>
<Number,1>
<Delimiter,;>
<Delimiter,}>
<Delimiter,}>
<Keyword,else>
<Delimiter,{>
<ID,System>
<Delimiter,.>
<ID,out>
<Delimiter,.>
<ID,println>
<Delimiter,(>
<String,"Line ">
<Operator,+>
<ID,lineCount>
<Operator,+>
<String," @ Illegal Start Char:Can't Match any pattern——\\">
<Operator,+>
<Delimiter,(>
<Keyword,int>
<Delimiter,)>
<ID,value>
<Delimiter,.>
<ID,charAt>
<Delimiter,(>
<Number,0>
<Delimiter,)>
<Delimiter,)>
<Delimiter,;>
<Keyword,return>
<Delimiter,;>
<Delimiter,}>
<Delimiter,}>
<ID,File>
<ID,output>
<Operator,=>
<Keyword,new>
<ID,File>
<Delimiter,(>
<String,"output.txt">
<Delimiter,)>
<Delimiter,;>
<Keyword,if>
<Delimiter,(>
<Operator,!>
<ID,output>
<Delimiter,.>
<ID,exists>
<Delimiter,(>
<Delimiter,)>
<Delimiter,)>
<ID,FileHelper>
<Delimiter,.>
<ID,createFile>
<Delimiter,(>
<ID,output>
<Delimiter,)>
<Delimiter,;>
<ID,StringBuilder>
<ID,outStream>
<Operator,=>
<Keyword,new>
<ID,StringBuilder>
<Delimiter,(>
<Delimiter,)>
<Delimiter,;>
<Keyword,for>
<Delimiter,(>
<ID,String>
<ID,s>
<Delimiter,:>
<ID,tokens>
<Delimiter,)>
<Delimiter,{>
<ID,outStream>
<Delimiter,.>
<ID,append>
<Delimiter,(>
<ID,s>
<Delimiter,)>
<Delimiter,;>
<ID,outStream>
<Delimiter,.>
<ID,append>
<Delimiter,(>
<Char,'\n'>
<Delimiter,)>
<Delimiter,;>
<Delimiter,}>
<ID,FileHelper>
<Delimiter,.>
<ID,writeTxtFile>
<Delimiter,(>
<ID,outStream>
<Delimiter,.>
<ID,toString>
<Delimiter,(>
<Delimiter,)>
<Delimiter,,>
<ID,output>
<Delimiter,)>
<Delimiter,;>
<Delimiter,}>
<Delimiter,}>
